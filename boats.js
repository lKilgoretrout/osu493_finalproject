require('dotenv').config()

const express     = require('express');
const router      = express.Router();
const app         = express();

const json2html   = require('json-to-html');

const {Datastore} = require('@google-cloud/datastore');
const handlebars  = require('express-handlebars').create({defaultLayout:'main'});
const bodyParser  = require('body-parser');
const request     = require('request');
const axios       = require('axios');

const datastore   = new Datastore();

const jwt        = require('express-jwt');
const jwt_decode = require('jwt-decode');
const jwksRsa    = require('jwks-rsa');
const logger     = require('morgan');

app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');

const path = require('path')
app.use('/', express.static(path.join(__dirname, 'public')))


const BOAT          = "Boat";
const USER          = "User";
const LOAD          = "Load";
var   ACCESS_TOKEN  = null;

/*{         BOAT
   "id"    : 123,             # Integer, Automatically generated by Datastore
   "name"  : "Sea Witch",       # String. The name of the boat.
   "type"  : "Catamaran",       # String. The type of the boat, power boat, catamaran etc.
   "length": 28,              # Integer. The lengthgth of the boat.
   "owner" : "auth0|5eb70257", # The boat's owner, value of sub property in the JWT
   "loads": [
        {
			"id"           : 123,                    # Int. Automatically generated by Datastore
			"item"         : "commercial fish",      # String. Description of the load
			"weight"       : 420,                    # Int. Weight of load in pounds
			"volume"       : 28,                     # Int. Volume of load in cubic feet
			"carrier"      : {
				"id"   : 33434225,              				# id of boat carrying the load.
				"name" : "Sea Witch"         				# name of boat carrying the load
				"self" : "https://appspot.com/boats/123"	    # canonical rep. of carrying boat
	        },
            "self":"https://appspot.com/laodss/123" # GET location of resource.  
       },
       {
           "id"           : 456,                    # Int. Automatically generated by Datastore
           "item"  : "whoopee cushions",     # String. Description of the load
           "weight"       : 42.0                    # Int. Weight of load in pounds
           "volume"       : 28,                    # Int. Volume of load in cubic feet
           "carrier"      : {
				"id"   : 33434225,              				# id of boat carrying the load.
				"name" : "Sea Witch"         				# name of boat carrying the load
				"self" : "https://appspot.com/boats/1234"	# canonical rep. of carrying boat
		   },
           "self":"https://appspot.com/laodss/123" # GET location of resource.  
       }
    ],
   "self":"https://appspot.com/boats/123" # Optional
}*/

//const { auth, requiresAuth } = require('express-openid-connect');
// 'requiresAuth' middleware  checks user authentication for privileged routes
// const { requiresAuth } = require('express-openid-connect');

const config = {
  authRequired: false,
  auth0Logout: true,
  baseURL: 'https://baucusr-final-v2.uw.r.appspot.com/',
  clientID: process.env.CLIENT_ID,
  issuerBaseURL: `https://${process.env.DOMAIN}`,
  secret: process.env.SECRET
};

// auth router attaches /login, /logout, and /callback routes to app.get('/') baseURL: https://baucusr-hw7-368604.uw.r.appspot.com/
//router.use(auth(config));
router.use(bodyParser.json());
router.use(logger('dev'));

function fromDatastore(item){
    item.id = item[Datastore.KEY].id;
    return item;
}


const checkJwt = jwt({
    secret: jwksRsa.expressJwtSecret({
      cache: true,
      rateLimit: true,
      jwksRequestsPerMinute: 5,
      jwksUri: "https://baucusr-final.us.auth0.com/.well-known/jwks.json"
    }),
  
    // Validate the audience and the issuer.
    issuer: "https://baucusr-final.us.auth0.com/",
    algorithms: ['RS256']    //,
	//credentialsRequired : false
  });

// calls a query on KIND, returns INT of count for that kind
async function getEntityCount(kind) {
    // get count of Boats (to add to response)
    const countQuery = datastore.createQuery(kind);
    var countResults = await datastore.runQuery(countQuery);
    var total_kind_count = countResults[0].length;
    console.log(`total_${kind}_count: ${total_kind_count}`);
    
    return total_kind_count;
}

/* ------------- Begin BOAT Model Functions ------------- */

/** update boat with boat_id(int) with new properties (one or more): 
* name(str), type(str) and length(int) and owner(str)
 * helper function for the PATCH /boats/:boat_id route
 **/
async function updateBoat(boat_id, name, type, length, owner) {
	//console.log("updateBoat: " + JSON.stringify(arguments, " ", 2));
	//console.log("boat_id: " + boat_id);
	const boatkey = datastore.key([BOAT, parseInt(boat_id, 10)]);
	const boatEntity = await datastore.get(boatkey);
	// boat = boatEntity[0]
	
	//console.log("1 updateBoat --> boatEntity: " + JSON.stringify(boatEntity, " ", 2))
	// No boat found ? --> return null
	if   (boatEntity[0] === undefined || boatEntity[0] === null) { return null; }
    else {  
		boatEntity[0]["name"]   = (name   === undefined) ? boatEntity[0].name   : name;
		boatEntity[0]["type"]   = (type   === undefined) ? boatEntity[0].type   : type;
		boatEntity[0]["length"] = (length === undefined) ? boatEntity[0].length : length;
		boatEntity[0]["owner"]  = (owner  === undefined) ? boatEntity[0].owner  : owner;
	}	
	//console.log("2 updateBoat --> boatEntity: " + JSON.stringify(boatEntity, " ", 2))
	
	// 'boat.name' was changed ? --> change 'boat.loads.carrier.name' )
	let ids_of_loads = [];  // load_id's of loads to change 'name' attribute on
	if (boatEntity[0].loads.length !== 0 && arguments["1"] !== undefined) {
		boatEntity[0].loads.forEach(load => { 
			load.carrier.name = name; 
			ids_of_loads.push(load.id);
		})
	}
	//console.log("3 updateBoat...");
	await datastore.update(boatEntity);  // save new attributes onto load object
	
	//console.log("4 updateBoat");
	// update the respective loads with new 'name' attribute
	for (i=0; i<ids_of_loads.length; i++) {
		const loadkey     = datastore.key([LOAD, parseInt(ids_of_loads[i], 10)]);
		var   loadEntity  = await datastore.get(loadkey);
		var   load        = loadEntity[0];
		load.carrier.name = name;
		await datastore.update(loadEntity);
	};
	//console.log("5 updateBoat");
	return boatEntity[0];
};
	



/**
* helper function for PUT /boats/:boat_id/laods/:load_id
* sets the load.carrier attribute for a given load with load_id
**/
async function updateLoadCarrier(load_id, boat_data) {
	const loadkey = datastore.key([LOAD, parseInt(load_id,10)]);
	var entity = await datastore.get(loadkey);
	entity[0].carrier = boat_data;
	await datastore.update(entity);
	return
}

/** helper function for PUT boats/:boat_id/loads/:load_id
* updates the boat.loads array to include load with given load_id
**/
async function updateBoatLoads(boat_id, load_data) {
	const boatkey = datastore.key([BOAT, parseInt(boat_id, 10)]);
	var entity = await datastore.get(boatkey);
	entity[0].loads.push(load_data);
	await datastore.update(entity);
	return 
}

/** helper function for DEL boats/:boat_id/loads/:load_id
* updates the boat.loads array to remove load with given load_id
* load is only removed form boat, NOT deleted from existence !
**/
async function removeBoatLoad(boat_id, load_id) {
	const boatkey = datastore.key([BOAT, parseInt(boat_id, 10)]);
	var entity = await datastore.get(boatkey);
	
	// lifted the folowing splice() tidbit from stackoverflow:
	// https://stackoverflow.com/questions/51724323/javascript-removing-object-from-array-by-key-value
	// get the index of the object in loads array with key=load_id
	const index = entity[0].loads.findIndex(load => load.id === load_id.toString());
	entity[0].loads.splice(index,1);
	await datastore.update(entity);
	return 
}

async function getLoad(load_id) {
    const key = datastore.key([LOAD, parseInt(load_id, 10)]);
    var entity = await datastore.get(key);
	var load = entity[0];
	return load;
}    


// no input parameter validation 
async function post_boat(req, owner, name, type ,length) {
    console.log("post_boat: owner param=" + JSON.stringify(owner, " ", 2));
    var key = datastore.key(BOAT);
    const new_boat = {
        "id"    : null,
        "name"  : name, 
        "type"  : type, 
        "length": length, 
        "loads" : [],   
        "owner" : owner,
        "self"  : null
    };
    return datastore.save({"key":key, "data":new_boat})
    .then(() => {
        new_boat.id = key.id;
        const self   = req.protocol + "://" + req.get("host") + req.baseUrl + "/" + key.id;
        new_boat.self = self;
        
        return  datastore.save({"key":key, "data":new_boat});
    })
    .then(() => {
        return new_boat;
    })
}

async function getBoat(boat_id) {
    const key = datastore.key([BOAT, parseInt(boat_id, 10)]);
	var boat = await datastore.get(key);
	return boat[0];
}
	

async function get_boats(req, owner, boat_count){
    var results = {};
    results["total_boat_count"] = boat_count;
    var q = datastore.createQuery(BOAT).filter( 'owner', '=', owner).limit(5);
    
    if (Object.keys(req.query).includes("cursor")) {
        q = q.start(req.query.cursor);
    }
	return datastore.runQuery(q).then( (entities) => {
            results["boats"] = entities[0].map(fromDatastore);
            
            if(entities[1].moreResults !== datastore.NO_MORE_RESULTS ){
                results.next = req.protocol + "://" + req.get("host") + req.baseUrl + 
                               "?cursor=" + entities[1].endCursor;
            }
			console.log("get_boats:\n " + JSON.stringify(results, " ", 2));
			return results;
	});
    
}

////////////////////////////////////////////////////////////////////////////////
// ROUTES
////////////////////////////////////////////////////////////////////////////////

// GET /boats
router.get('/', checkJwt, async function(err, req, res, next) {
	
	// validate JWT
	if (err.name === 'UnauthorizedError') {  
		console.log("UNAUTHORIZED GET!");
		// if bogus/missing send control to 'unauthorized GET' (next route)
		return next(err);
        
	// accept headers must equal application/json or --> 406 
	
	} else if ( req.get('accept') !== 'application/json' ) {
		return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})	

    // JWT valid, send control to next middleware 
    } else return next()
	}, 
	async function (req, res, next) {
		try {
			
			// get token from Authorization header, check 'sub' value === 'owner' of boat
			var decoded = jwt_decode(req.get("Authorization"));
			var sub = decoded.sub;
			
			console.log(`GET /boats, user=${sub}`);
            const boat_count = await getEntityCount(BOAT);
			const boats = await get_boats(req, sub, boat_count)
			
			return res.status(200).json(boats);		
		
        } catch { console.log("get_boats() messed up!"); }
	
	// error handler for GET /boats
	}, function(err, req, res, next){
		console.log("err: " + JSON.strinfigy(err, " ", 2));
		return res.status(401).json({"error": "GET /boats route messed up, invalid JWT"});
	}
	
);	

/*
// error handler for GET /boats, PUT /boats/:boat_id/loads/:load_id
router.use('/', function(err, req, res, next){
	console.log("err: " + JSON.strinfigy(err, " ", 2));
    return res.status(401).json({"error": "GET /boats route messed up, invalid JWT"});
});
*/

// POST /boats  ( create boat)
router.post('/', checkJwt, async function(err,req, res, next) {
    
	// missing jwt ? --> 401
	if (err.name === 'UnauthorizedError') {  
		// if bogus/missing send control to 'unauthorized GET' (next route)
		return next(err);
	} else { next(); }
	},
	async function (req, res, next) {
		// content-type must equal application/json OR --> 415
		if (req.get('content-type') !== 'application/json'){
			return res.status(415).json({'error': 'Server only accepts application/json data.'})
		} else if ( req.get('accept') !== 'application/json' ) {
			return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})
		}
		// get token from Authorization header, check 'sub' value --> 'owner' of boat
		var decoded = jwt_decode(req.get("Authorization"));
		var sub = decoded.sub;
		
		let new_boat = await post_boat(req, sub, req.body.name, req.body.type, req.body.length);
		
		//res.location(req.protocol + "://" + req.get('host') + req.baseUrl + '/' + new_boat.id);
		return res.status(201).json(new_boat);

	// error handler for POST /boats	
	}, function(err, req, res, next){
		console.log("err: " + JSON.stringify(err, " ", 2));
		return res.status(401).json({"error": "POST /boats, JWT invalid"});
	}
);

// unallowed method on route:
// DEL /boats --> send 406, set Allow header
router.delete('/', function (req, res){
    res.set('Allow', 'GET, POST');
	console.log("405 DELETE Error: you can't just delete all the boats, GOSH!");
    return res.status(405).json({"DELETE /boats ?" :  "HOW DARE YOU ! TAKE A 405 AND THINK ABOUT WHAT YOU'VE DONE!"});
});


/*
// error handler for GET /boats/:boat_id
router.use('/', function(err, req, res, next){
	console.log("err: " + JSON.stringify(err, " ", 2));
    return res.status(401).json({"error": "POST /boats, JWT invalid"});
});
*/


// get boat by boat_id
router.get('/:boat_id', checkJwt, function (err, req, res, next) {
    if (err.name === 'UnauthorizedError') {  
		console.log("UNAUTHORIZED GET!");
		// if bogus/missing send control to 'unauthorized GET' (next route)
		return next(err);
	    
	// JWT valid, go to next middleware
    } else return next()
    },
    async function (req, res, next) {
        try {
            console.log(`GET /boat/${req.params.boat_id}`);
            var boat = await getBoat(req.params.boat_id);
			console.log("boat: " + JSON.stringify(boat, " ", 2));
			
			// get token from Authorization header, check 'sub' value === 'owner' of boat
			var decoded = jwt_decode(req.get("Authorization"));
			var sub = decoded.sub;
			
			
            if (!boat) { 
				console.log("Failed GET /boats/:boat_id, no such boat");
                return res.status(404).json({ 'Error': 'No boat with this boat_id exists' });
            } else if (boat.owner !== sub) {
                console.log("Failed GET /boats/:boat_id, can't view other owner's boats");
                return res.status(403).json({ 'Error': 'Unauthorized: you may not view boats of another owner'});
            } else if ( req.get('accept') !== 'application/json' ) {
				return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})	
			}
			
			res.status(200).json(boat);
        } catch { console.log(`getBoat(${req.params.boat_id}) messed up!`) }
		
	// error handler for GET /boats/:boat_id	
    }, function(err, req, res, next){
		console.log("err: GET /boats/:boat_id , JWT invalid")
		return res.status(401).json({"error": "GET /boats/:boat_id , JWT invalid"});
	}
);
            
/*
// error handler for GET /boats/:boat_id
router.use('/:boat_id', function(err, req, res, next){
	console.log("err: GET /boats/:boat_id , JWT invalid")
    return res.status(401).json({"error": "GET /boats/:boat_id , JWT invalid"});
});
*/



// DELETE /boats/:boat_id
router.delete('/:boat_id', checkJwt, async function(err, req, res, next) {
	
	// check token, if bogus --> error handler (next route)
	console.log("router.delete: err.name: " + err.name);
	if (err.name === 'UnauthorizedError') {
		console.log("UNAUTHORIZED DELETE");
		return next(err);
	} else { return next(); }
	
	// check boat_id and owner
    }, async function (req, res, next) {
		try {
			var boat = await getBoat(req.params.boat_id);
			res.locals.boat = boat;
			console.log("DELETE /boats/:boat_id, boat to delete: " + JSON.stringify(boat, " ", 2));
			//console.log("req.get('Authorization'): " + JSON.stringify(req.get("Authorization"), " ", 2).substring(7));
			var decoded = jwt_decode(req.get("Authorization"));  // cut out 'Bearer' before token
			
			// no JWT provided ? --> 401
			if (decoded === null || decoded === undefined) {
				console.log("No JWT provided for request, you get the 401 beeyintch");
				return res.status(401).json({"error": "No Authorization credentials provided"});
			}
			//ACCESS_TOKEN = JSON.parse(decoded);
			var sub = decoded.sub;
			//console.log(`sub: '${sub}, length=${sub.length}`);
			//console.log(`boat.owner: '${boat.owner}, length=${boat.owner.length}`);
			
			// no such boat ? --> 404
			if (boat === undefined || boat === null ) {
				return res.status(404).json({'error' : `DELETE ERROR: boat_id ${req.params.boat_id} doesn't exist`});
			
			// wrong jwt ? --> 403
			} else if (boat.owner !== sub) {
				console.log(boat.owner + " !== " + sub + 
					`\nDELETE ERROR: can't delete someone else's boat!`);
				return res.status(403).json(
					{'error':`DELETE ERROR: can't delete someone else's boat!`}
				);
			
			} else { return next(); }
		} catch { 
			console.log("verify owner/check boat exist block messed up!"); 
		}
		
		
	// middleware to handle delete:  also delete all loads that were on boat!
    }, async function (req, res, next) {
		// delete all the loads listed on the boat 
		try {
			boat = res.locals.boat;
			for (i=0; i<boat.loads.length; i++) {
				var key = datastore.key([LOAD, parseInt(boat.loads[i].id, 10)]);
				await datastore.delete(key);
			}
		} catch {
			return res.status(500).send("DELETE /boats/:boat_id Error:  trying to delete loads associated with boat");
		}	
		
		// now delete the boat itself!
		try {
			const key_of_boat_to_delete = datastore.key([BOAT, parseInt(req.params.boat_id, 10)]);
			await datastore.delete(key_of_boat_to_delete);
			console.log(`DELETE /boats/${req.params.boat_id} successful!`);
			return res.status(204)//.send(`DELETE /boats/${req.params.boat_id} successful!`);
		} catch {
			return res.status(500).send("Something horribly wrong happened in trying to delete a boat");
		}
	
	// error handler for DELETE /boats/:boat_id
	}, function (err, req, res, next) {
		console.log("DELETE ERROR: invalid token");
		return res.status(401).json({"error": "DELETE /boats/:boat_id, invalid jwt"});
	}
);	


/*
// error handler for DELETE /boats/:boat_id
router.use('/:boat_id', function (err, req, res, next) {
	console.log("DELETE ERROR: invalid token");
    return res.status(401).json({"error": "DELETE /boats/:boat_id, invalid jwt"});
});
*/


// modify boat - modifying less than all the attributes of the boat
// patch /boats/:boat_id
router.patch('/:boat_id', checkJwt, function(err, req, res, next) {
	
	// validate JWT
		if (err.name === 'UnauthorizedError') {  
			console.log("UNAUTHORIZED PUT!");
			// if boat is bogus/missing send control to 'unauthorized GET' (next route)
			return next(err);
		} else if (err) {
			next(err);
		} else return next()
		
    // check boat_id and owner
    }, async function (req, res, next) {
		try {
			var boat = await getBoat(req.params.boat_id);
			
			//console.log("req.get('Authorization'): " + JSON.stringify(req.get("Authorization"), " ", 2).substring(7));
			var decoded = jwt_decode(req.get("Authorization"));  // cut out 'Bearer' before token
			//console.log("ACCESS_TOKEN: " + JSON.stringify(decoded, " ", 2));
			var sub = decoded.sub;
			
			// boat doesn't exist ? --> 404
			if (boat === undefined || boat === null ) {
				return res.status(404).json(
					{'error' : `PATCH /boats/:boat_id : boat_id= ${req.params.boat_id} doesn't exist`}
				);
			
			// no JWT provided ? --> 401
			} else if (decoded === null || decoded === undefined) {
				console.log("No JWT provided for request, you get the 401 beeyintch");
				return res.status(401).json({"error": "No Authorization credentials provided"});
			
			// owner of boat is not the authenticated user -->403
			} else if (boat.owner !== sub) {
				console.log(boat.owner + " !== " + sub + 
					`/nPATCH /boats/:boat_id ERROR: can't modify someone else's boat!`);
				return res.status(403).json(
					{'error':`PATCH /boats/:boat_id :  can't modify someone else's boat!`}
				);
				
			// content-type/accept headers must equal application/json OR --> 415, -->406 respectively
			} else if (req.get('content-type') !== 'application/json'){
				return res.status(415).json({'error': 'Server only accepts application/json data.'})
			} else if ( req.get('accept') !== "application/json") {
				return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})
			
			} else { return next(); }
		} catch { console.log("verify owner/check boat exist block messed up!"); }
	
	// middleware to handle put
    }, async function (req, res, next) {
		try {
			var boat_id = req.params.boat_id; 
			var name    = req.body.name;
			var type    = req.body.type;
			var length  = req.body.length;
			var owner   = req.body.owner;
			
			var boat = await updateBoat(boat_id, name, type, length, owner);
			console.log("updateBoat --> " + JSON.stringify(boat, " ", 2));
			return res.status(201).json(boat)//.send(`PUT /boats/${req.params.boat_id} successful!`);
		} catch {
			return res.status(500).json({"error": "PATCH /boats/:boat_id : updateBoat"});
		}
	
	// error handler for PATCH /boats/:boat_id	
	}, async function(err, req, res, next){
		console.log("PATCH err: " + JSON.stringify(err, " ", 2));
		res.status(401).json({"error": "PATCH /boats/:boat_id, invalid/missing auth token"});
	}
);

/*
// error handler for PATCH /boats/:boat_id
router.use('/:boat_id', async function(err, req, res, next){
	console.log("PATCH err: " + JSON.stringify(err, " ", 2));
    res.status(401).json({"error": "PATCH /boats/:boat_id, invalid/missing auth token"});
});
*/

// modify boat
// PUT /boats/:boat_id
router.put('/:boat_id', checkJwt, function(err, req, res, next) {
	
	// validate JWT
	console.log("WE HAVE ARRIVED IN PUT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		if (err.name === 'UnauthorizedError') {  
			console.log("UNAUTHORIZED PUT!");
			// if boat is bogus/missing send control to 'unauthorized GET' (next route)
			return next(err);
		} else if (err) {
			return next(err);
		} else return next()
		
    // check boat_id and owner
    }, async function (req, res, next) {
		try {
			var boat = await getBoat(req.params.boat_id);
			
			var decoded = jwt_decode(req.get("Authorization"));  // cut out 'Bearer' before token
			var sub = decoded.sub;
			
			// boat doesn't exist ? --> 404
			if (boat === undefined || boat === null ) {
				return res.status(404).json(
					{'error' : `PUT /boats/:boat_id : boat_id= ${req.params.boat_id} doesn't exist`}
				);
			
			// no JWT provided ? --> 401
			} else if (decoded === null || decoded === undefined) {
				console.log("No JWT provided for request, you get the 401 beeyintch");
				return res.status(401).json({"error": "No Authorization credentials provided"});
			
			// owner of boat is not the authenticated user --> 404
			} else if (boat.owner !== sub) {
				console.log(boat.owner + " !== " + sub + 
					`/nPUT /boats/:boat_id ERROR: can't modify someone else's boat!`);
				return res.status(403).json(
					{'error':`PUT /boats/:boat_id :  can't modify someone else's boat!`}
				);
			
			// content-type/accept headers must equal application/json OR --> 415, -->406 respectively
			} else if (req.get('content-type') !== 'application/json'){
				return res.status(415).json({'error': 'Server only accepts application/json data.'})
			} else if ( req.get('accept') !== 'application/json' ) {
				return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})
			
			} else { return next(); }
		} catch { console.log("verify owner/check boat exist block messed up!"); }
	
	// middleware to handle put
    }, async function (req, res, next) {
		try {
			var boat_id = req.params.boat_id; 
			var name    = req.body.name;
			var type    = req.body.type;
			var length  = req.body.length;
			var owner   = req.body.owner;
			
			var boat = await updateBoat(boat_id, name, type, length, owner);
			
			return res.status(201).json(boat)//.send(`PUT /boats/${req.params.boat_id} successful!`);
		} catch {
			return res.status(500).send("Something horribly wrong happened in PUT /boats/:boat_id : updateBoat");
		}
	
	// error handler for PUT /boats/:boat_id
	}, function(err, req, res, next){
		console.log("err: " + JSON.stringify(err, " ", 2));
		return res.status(401).json({"error": "PUT /boats/:boat_id , invalid or missing auth token"});
}
);

/*
// error handler for PUT /boats/:boat_id
router.use('/:boat_id', function(err, req, res, next){
	console.log("err: " + JSON.stringify(err, " ", 2));
    return res.status(401).json({"error": "PUT /boats/:boat_id , invalid or missing auth token"});
});
*/


// assign load to boat
// PUT /boats/:boat_id/loads/:load_id
router.put('/:boat_id/loads/:load_id', checkJwt, function(err,req, res, next) {
    	
		// validate JWT
		if (err.name === 'UnauthorizedError') {  
			console.log("UNAUTHORIZED PUT!");
			// if bogus/missing send control to 'unauthorized GET' (next route)
			return next(err);
		} else if (err) {
			next(err);
			
		// JWT valid, send control to next middleware 
		} else return next()
	}, 
	
	// check if boat exists, check headers (content-type, accept)
	async function (req, res, next) {
		try {
			var boat = await getBoat(req.params.boat_id);
			//console.log("boat: " + JSON.stringify(boat, " " , 2));
			var load = await getLoad(req.params.load_id);
			//console.log("load: " + JSON.stringify(load, " " , 2));
			res.locals.boat = boat;
			res.locals.load = load;
			
			// get token from Authorization header and get 'sub' value (owner)
			var decoded = jwt_decode(req.get("Authorization"));  // cut out 'Bearer' before token
			var sub = decoded.sub;
			
			// check boat and load exist
			if (!boat || !load) {
				console.log(`Failed PUT /boats/${req.params.boat_id}/loads/${req.params.load_id}, invalid boat_id`);
				return res.status(404).json({ "Error": "The specified boat and/or load does not exist" });
			
			// accept headers must equal application/json OR --> 406 
			} else if ( req.get('accept') !== 'application/json' ) {
				return res.status(406).json({'error':'NOT ACCEPTABLE: Server only sends application/json data.'})
				
			// check if load already assigned to carrier
            } else if (load.carrier !== null) {
				console.log("load.carrier: " + JSON.stringify(load.carrier, " ", 2));
                console.log(`Failed PUT /boats/${req.params.boat_id}/loads/${req.params.load_id}, load already has carrier`);
                return res.status(400).json({ "Error": "The load is already loaded on another boat"});
            
			// no JWT provided ? --> 401
			} else if (decoded === null || decoded === undefined) {
				console.log("No JWT provided for request, you get the 401 beeyintch");
				return res.status(401).json({"error": "No Authorization credentials provided"});
			
			
			// check if authenticated user is owner of boat to add load to
			} else if (boat.owner !== sub) {
				console.log(boat.owner + " !== " + sub + 
					`/nPUT ERROR: can't put load on someone else's boat!`);
				return res.status(403).json(
					{'error':`PUT ERROR: can't PUT a load on someone else's boat!`}
				);
			} else { return next(); }
		
		} catch { console.log("verify owner/check boat exist block messed up!"); }
	},
	// add load to boat and change carrier listed on load
	async function (req, res, next) {
			
		try {
			var load = res.locals.load;
			var boat = res.locals.boat;
			
			const load_data = {
			   "id"         : load.id, 
			   "item"       : load.item,
			   "weight"     : load.weight,
			   "volume"     : load.volume,
			   "carrier"  : {
								"id"   : boat.id,
								"name" : boat.name,
								"self" : boat.self
			   },
			   "self"       : load.self
			};
			const boat_data = {
				"id"        : boat.id,
				"name"      : boat.name,
				"self"      : boat.self
			};
			await updateLoadCarrier(req.params.load_id, boat_data)
			//.then(() => {
			await updateBoatLoads(req.params.boat_id, load_data)
				//.then(() => {
			return res.status(204).end();
				//});
			//});
			
		} catch (err) {
			console.log("PUT /boats/:boat_id/loads/:load_id messed up!" + JSON.stringify(err, " ", 2));
			return res.status(500).json({"error": JSON.stringify(err, " ", 2)});
	    } 
		
	// error handler for PUT boats/:boat_id/loads/:load_id
 	},function(err, req, res, next){
		console.log("err: " + JSON.stringify(err, " ", 2));
		return res.status(401).json({"error": "PUT /boats/:boat_id/loads/:load_id, invalid/missing jwt"});
	}	
);			

/*
// error handler for PUT boats/:boat_id/loads/:load_id
router.use('/:boat_id/loads/:load_id', function(err, req, res, next){
	console.log("err: " + JSON.stringify(err, " ", 2));
    return res.status(401).json({"error": "PUT /boats/:boat_id/loads/:load_id, invalid/missing jwt"});
});
*/
	
// remove load from boat (but don't delete the load!)
// DEL /boats/:boat_id/loads/:load_id
router.delete('/:boat_id/loads/:load_id', checkJwt, function(err,req, res, next) {
    	
		// validate JWT
		if (err.name === 'UnauthorizedError') {  
			console.log("UNAUTHORIZED DELETE!");
			// if bogus/missing send control to 'unauthorized GET' (next route)
			return next(err);
		} else if (err) {
			next(err);
			
		// JWT valid, send control to next middleware 
		} else return next()
	}, 
	
	// check if boat exists
	async function (req, res, next) {
		try {
			var boat = await getBoat(req.params.boat_id);
			console.log("boat: " + JSON.stringify(boat, " " , 2));
			var load = await getLoad(req.params.load_id);
			console.log("load: " + JSON.stringify(load, " " , 2));
			res.locals.boat = boat;
			res.locals.load = load;
			
			// get token from Authorization header, check 'sub' value === 'owner' of boat
			var decoded = jwt_decode(req.get("Authorization"));
			var sub = decoded.sub;
			
			
			// check boat and load exist
			if (!boat || !load) {
				console.log(`Failed DEL /boats/${req.params.boat_id}/loads/${req.params.load_id}, invalid boat_id`);
				return res.status(404).json({ "Error": "The specified boat and/or load does not exist" });
			
			// check if load even has a carrier
            } else if (load.carrier === null) {
				console.log("load.carrier: " + JSON.stringify(load.carrier, " ", 2));
                console.log(`Failed DEL /boats/${req.params.boat_id}/loads/${req.params.load_id}, load not on any boat`);
                return res.status(404).json({ "Error": "The load has no carrier, YOU HAVE ACTED IN VAIN!"});
            
			// check if authenticated user is owner of boat to add load to
			} else if (boat.owner !== sub) {
				console.log(boat.owner + " !== " + sub + 
					`/nPUT ERROR: can't DELETE load on someone else's boat!`);
				return res.status(403).json(
					{'error':`DELETE ERROR: can't remove a load on someone else's boat!`}
				);
			} else { return next(); }
		
		} catch { console.log("verify owner/check boat exist block messed up!"); }
	},
	// remove load from boat and change carrier listed on load
	async function (req, res, next) {
			
		try {
			var load = res.locals.load;
			var boat = res.locals.boat;
			var loads_on_boat = boat.loads;
			
			// set carrier on load to null
			await updateLoadCarrier(req.params.load_id, null)
			await removeBoatLoad(req.params.boat_id, req.params.load_id);
			return res.status(204).end();
			
		} catch (err) {
			console.log("DEL /boats/:boat_id/loads/:load_id messed up!" + JSON.stringify(err, " ", 2));
			return res.status(500).json({"error": JSON.stringify(err, " ", 2)});
	    } 
	
	// error handler for DELETE boats/:boat_id/loads/:load_id
 	} , function(err, req, res, next){
	console.log("err: " + JSON.stringify(err, " ", 2));
    return res.status(401).json({"error": "DELETE /boats/:boat_id/loads/:load_id invalid/missing auth token"});
}	
);				

/*
// error handler for DELETE boats/:boat_id/loads/:load_id
router.use('/:boat_id/loads/:load_id', function(err, req, res, next){
	console.log("err: " + JSON.stringify(err, " ", 2));
    return res.status(401).json({"error": "DELETE /boats/:boat_id/loads/:load_id invalid/missing auth token"});
});
*/
				




module.exports = router;
